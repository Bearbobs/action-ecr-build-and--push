name: build-and-push-to-ecr
description: build and cache and push images to amazon-ecr
branding:
  icon: "terminal"
  color: "blue"
inputs:
  service-name:
    description: name of the service to be deployed
    required: true
  aws-access-key:
    description: access key for ecr repo
    required: true
  aws-secret-access-key:
    description: secret access key for ecr repo
    required: true
  aws-region:
    description: region for AWS
    required: false
    default: ap-south-1
  image-tag:
    description: tag of the image to be pushed
    required: false
    default: latest
runs:
  - name: Configure AWS credentials
    uses: aws-actions/configure-aws-credentials@v1
    with:
      aws-access-key-id: ${{ inputs.aws-access-key }}
      aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
      aws-region: ${{ inputs.aws-region }}
  - name: Login to Amazon ECR
    id: login-ecr
    uses: aws-actions/amazon-ecr-login@v1
  - name: Prepare
    id: prep
    run: |
      TAG=${{ inputs.image-tag }}
      IMAGE=${{ steps.login-ecr.outputs.registry }}/backend
      echo ::set-output name=tagged_image::${IMAGE}:${TAG}
      echo ::set-output name=tag::${TAG}
  - name: Set up Docker Buildx
    id: buildx
    uses: docker/setup-buildx-action@master
  - name: Cache Docker layers
    uses: actions/cache@v2
    with:
      path: /tmp/.buildx-cache
      key: ${{ runner.os }}-single-buildx-${{ github.sha }}
      restore-keys: |
        ${{ runner.os }}-single-buildx
  - name: Build production image
    uses: docker/build-push-action@v2
    with:
      context: ${{ inputs.service-name }}/
      builder: ${{ steps.buildx.outputs.name }}
      file: ${{ inputs.service-name }}/Dockerfile
      push: true
      tags: ${{ steps.prep.outputs.tagged_image }}
      cache-from: type=local,src=/tmp/.buildx-cache
      cache-to: type=local,dest=/tmp/.buildx-cache-new
  - name: Move cache
    run: |
      rm -rf /tmp/.buildx-cache
      mv /tmp/.buildx-cache-new /tmp/.buildx-cache
